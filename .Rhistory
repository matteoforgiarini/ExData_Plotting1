amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getin()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
#    i <<- solve(data, ...)
i <- solve(data, ...)
x$setinv(x)
i
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getin()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
#    i <<- solve(data, ...)
i <- solve(data, ...)
x$setinv(data)
i
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
## Put comments here that give an overall description of what your
## functions do
# this function calculates che inverse of an invertible matrix, caches it and shows it.
# when a new matrix is passed, it checks whether the inverse is already cached. If it does, the inverse is diplayed, otherwise, the inverse is calculated.
## Write a short comment describing this function
## this function creates a list of functions "set, get, setinverse, getinverse" the allow to manipolate a matrix and its inverse.
makeCacheMatrix <- function(x = matrix()) {
i<- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() {x}
setinverse <- function(x) {
i <<-  solve(x)
}
getinverse <- function() { i}
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
## this function checks whether the inverse of the input matrix has been already cached. If it does, the the function gets the inverse. if a new matrix has been passed,
## the funciont calculates the inverse matrix.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getin()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
#    i <<- solve(data, ...)
i <- solve(data, ...)
x$setinv(data)
i
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
library(datasets)
data(iris)
?iris
iris
View(iris)
names(iris)
for ( i in 1:4) {
sapply(split(iris[,i], Species), mean)
}
names(iris)
for ( i in 1:4) {
sapply(split(iris[,i], iris$Species), mean)
}
names(iris)
for ( i in 1:4) {
a=sapply(split(iris[,i], iris$Species), mean)
a
}
sapply(split(iris[,1], iris$Species), mean)
colMeans(iris)
colMeans(iris)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
View(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
names(mtcars)
lapply(mtcars$hp[cyl=4], mean)
lapply(mtcars$hp[cyl=8], mean)
lapply(mtcars$hp[cyl=4,8], mean)
for (i in c(4,8) {
lapply(mtcars$hp[cyl=8], mean)
}
for (i in c(4,8)) {
lapply(mtcars$hp[cyl=8], mean)
}
for (i in c(4,8)) {
lapply(mtcars$hp[cyl=i], mean)
}
for (i in c(4,8)) {
a=lapply(mtcars$hp[cyl=i], mean)
a
}
a=lapply(mtcars$hp[cyl=4], mean)
b=lapply(mtcars$hp[cyl=8], mean)
a-b
a
a
b
library(datasets)
data(mtcars)
mtcars
a=lapply(mtcars$hp[cyl=4], mean)
b=lapply(mtcars$hp[cyl=8], mean)
a
b
names(mtcars)
sapply(split(iris[,4], iris$cyl), mean)
sapply(split(mtcars[,4], mtcars$cyl), mean)
m=sapply(split(mtcars[,4], mtcars$cyl), mean)
m
d=m[1,1] - m[1,3]
d=m[1] - m[3]
d
set.seed(1)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
?rpois
library(datasets)
Rprof()
summaryRprof()
summary(Rprof())
set.seed(1)
rpois(5, 2)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
for ( m in 0:3)
{
for (s in 1:2)
{
x=rnorm(100, m, s)
y=rnorm(100, m, s)
plot (x,y)
}
}
for ( m in 0:3)
{
for (s in 1:2)
{
x=rnorm(100, m, s)
y=rnorm(100, m, s)
plot (x+2y,y)
}
}
for ( m in 0:3)
{
for (s in 1:2)
{
x=rnorm(100, m, s)
y=rnorm(100, m, s)
plot ((x+2y),y)
}
}
for ( m in 0:3)
{
for (s in 1:2)
{
x=rnorm(100, m, s)
y=rnorm(100, m, s)
plot (x,y)
}
}
for ( m in 0:3)
{
for (s in 1:2)
{
x=rnorm(100, m, s)
y=rnorm(100, m, s)
plot (22*x,y)
}
}
for ( m in 0:3)
{
for (s in 1:2)
{
x=rnorm(100, m, s)
y=rnorm(100, m, s)
z=x+2y
plot (z,y)
}
}
for ( m in 0:3)
{
for (s in 1:2)
{
x=rnorm(100, m, s)
y=rnorm(100, m, s)
z=x+2y
plot (z, y)
}
}
for ( m in 0:3)
{
for (s in 1:2)
{
x=rnorm(100, m, s)
y=rnorm(100, m, s)
z=x+2y
z
plot (z, y)
}
}
for ( m in 0:3)
{
for (s in 1:2)
{
x=rnorm(100, m, s)
y=rnorm(100, m, s)
plot (z, y)
}
}
for ( m in 0:3)
{
for (s in 1:2)
{
x=rnorm(100, m, s)
y=rnorm(100, m, s)
plot (x, y)
}
}
for ( m in 0:3)
{
for (s in 1:2)
{
x=rnorm(100, m, s)
y=rnorm(100, m, s)
plot (x^2, y)
}
}
for ( m in 0:3)
{
for (s in 1:2)
{
x=rnorm(100, m, s)
y=rnorm(100, m, s)
par(mar= c(2,2,2,2))
plot (x^2, y)
}
}
for ( m in 0:3)
{
for (s in 1:2)
{
x=rnorm(100, m, s)
y=rnorm(100, m, s)
par(mar= c(3,3,2,2))
plot (x^2, y)
}
}
for ( m in 0:3)
{
for (s in 1:2)
{
x=rnorm(100, m, s)
y=rnorm(100, m, s)
par(mar= c(4,4,2,2))
plot (x^2, y)
}
}
for ( m in 0:3)
{
for (s in 1:2)
{
x=rnorm(100, m, s)
y=rnorm(100, m, s)
par(mar= c(4,4,1,1))
plot (x^2, y)
}
}
for ( m in 0:2)
{
for (pch in 1:6)
{
x=rnorm(100, m)
y=rnorm(100, m)
par(mar= c(4,4,1,1))
plot (x^2, y, pch=pch)
}
}
for ( m in 0:2)
{
for (pch in 1:10)
{
x=rnorm(100, m)
y=rnorm(100, m)
par(mar= c(4,4,1,1))
plot (x^2, y, pch=pch)
}
}
example(points)
title("scaterplot con segno=" pch)
}
}
for ( m in 0:2)
{
for (pch in 1:14)
{
x=rnorm(100, m)
y=rnorm(100, m)
par(mar= c(4,4,1,1))
plot (x^2, y, pch=pch)
title("scaterplot con segno=" pch)
}
}
for ( m in 0:2)
{
for (pch in 1:14)
{
x=rnorm(100, m)
y=rnorm(100, m)
par(mar= c(4,4,1,1))
plot (x^2, y, pch=pch)
title("scaterplot con segno= pch")
}
}
for ( m in 0:2)
{
for (pch in 1:14)
{
x=rnorm(100, m)
y=rnorm(100, m)
par(mar= c(4,4,3,1))
plot (x^2, y, pch=pch)
title("scaterplot con segno= pch")
}
}
for ( m in 0:2)
{
for (pch in 1:14)
{
x=rnorm(100, m)
y=rnorm(100, m)
par(mar= c(4,4,3,1))
plot (x^2, y, pch=pch)
title(paste("scaterplot con segno= pch", phc))
}
}
for ( m in 0:2)
{
for (pch in 1:14)
{
x=rnorm(100, m)
y=rnorm(100, m)
par(mar= c(4,4,3,1))
plot (x^2, y, pch=pch)
title(paste("scaterplot con segno= pch", pch))
}
}
for ( m in 0:2)
{
for (pch in 1:14)
{
x=rnorm(100, m)
y=rnorm(100, m)
par(mar= c(4,4,3,1))
plot (x^2, y, pch=pch)
title(paste("scaterplot con segno=", pch))
}
}
for ( m in 0:2)
{
for (pch in 1:14)
{
x=rnorm(100, m)
y=rnorm(100, m)
par(mar= c(4,4,3,1))
plot (x^2, y, pch=pch)
title(paste("scaterplot con segno=", pch))
legend("topleft", legend="data", pch=pch)
}
}
for ( m in 0:2)
{
for (pch in 1:14)
{
x=rnorm(100, m)
y=rnorm(100, m)
par(mar= c(4,4,3,1))
plot (x^2, y, pch=pch)
title(paste("scaterplot con segno=", pch))
legend("topleft", legend="data", pch=pch)
line=lm(y~x)
abline(line)
}
}
for ( m in 0:2)
{
for (pch in 1:14)
{
x=rnorm(100, m)
y=rnorm(100, m)
par(mar= c(4,4,3,1))
plot (x, y, pch=pch)
title(paste("scaterplot con segno=", pch))
legend("topleft", legend="data", pch=pch)
line=lm(y~x)
abline(line)
}
}
for ( m in 0:2)
{
for (pch in 1:14)
{
x=rnorm(100, m)
y=rnorm(100, m)
par(mar= c(4,4,3,1))
plot (x, y, pch=pch)
title(paste("scaterplot con segno=", pch))
legend("topleft", legend="data", pch=pch)
line=lm(y~x)
abline(line, lwd=4, col="red")
}
}
for ( m in 0:2)
{
for (pch in 1:14)
{
x=rnorm(100, m)
y=rnorm(100, m)
par(mar= c(4,4,3,1))
plot (x, y, pch=pch, xlab="xxxx", ylab="yyyy")
title(paste("scaterplot con segno=", pch))
legend("topleft", legend="data", pch=pch)
line=lm(y~x)
abline(line, lwd=4, col="red")
}
}
for ( m in 0:2)
{
for (pch in 1:14)
{
x=rnorm(100, m)
y=rnorm(100, m)
par(mar= c(4,4,1,1))
plot (x^2, y, pch=pch)
title("scaterplot con segno= pch")
}
}x=rnorm(100, m)
y=rnorm(100, m)
par(mar= c(4,4,3,1))
plot (x, y, pch=pch, xlab="xxxx", ylab="yyyy")
title(paste("scaterplot con segno=", pch))
legend("topleft", legend="data", pch=pch)
line=lm(y~x)
abline(line, lwd=4, col="red")
for ( m in 0:2)
{
for (pch in 1:14)
{
x=rnorm(100, m)
y=rnorm(100, m)
par(mar= c(4,4,3,1), mfrow=c(2,1))
plot (x, y, pch=pch, xlab="xxxx", ylab="yyyy")
plot (x,y^2)
title(paste("scaterplot con segno=", pch))
legend("topleft", legend="data", pch=pch)
line=lm(y~x)
abline(line, lwd=4, col="red")
}
}
setwd("~/Google Drive/Github/ExData_Plotting1")
data=read.csv2(file = "household_power_consumption.txt", header = T)
View(data)
View(data)
d=strptime(data$Date, "%d/%m/%Y")
d=data.frame(strptime(data$Date, "%d/%m/%Y"))
View(d)
